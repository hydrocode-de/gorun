// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package db

import (
	"context"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (user_id, token, created_at, expires_at)
VALUES (
    ?1,
    ?2,
    datetime('now'),
    ?3
)
RETURNING id, user_id, token, created_at, expires_at, is_revoked
`

type CreateRefreshTokenParams struct {
	UserID    string    `json:"userId"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expiresAt"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsRevoked,
	)
	return i, err
}

const getRefreshTokenUser = `-- name: GetRefreshTokenUser :one
SELECT u.id, u.email, u.password_hash, u.is_admin, u.created_at, u.last_login FROM users u
JOIN refresh_tokens rt ON rt.user_id = u.id
WHERE rt.token = ?1
AND rt.expires_at > datetime('now')
AND rt.is_revoked = FALSE
`

func (q *Queries) GetRefreshTokenUser(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenUser, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserRefreshTokens = `-- name: GetUserRefreshTokens :many
SELECT id, user_id, token, created_at, expires_at, is_revoked FROM refresh_tokens
WHERE user_id = ?1 AND is_revoked = FALSE
`

func (q *Queries) GetUserRefreshTokens(ctx context.Context, userID string) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getUserRefreshTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.IsRevoked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET is_revoked = TRUE
WHERE token = ?1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
