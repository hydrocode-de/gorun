name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64  # Windows ARM64 is not commonly supported
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          cd manager && npm install
          
      - name: Build frontend
        run: |
          cd manager && npm run build
          
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -o gorun-${{ matrix.goos }}-${{ matrix.goarch }} .
          if [ "${{ matrix.goos }}" = "windows" ]; then
            mv gorun-${{ matrix.goos }}-${{ matrix.goarch }} gorun-${{ matrix.goos }}-${{ matrix.goarch }}.exe
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gorun-${{ matrix.goos }}-${{ matrix.goarch }}
          path: gorun-${{ matrix.goos }}-${{ matrix.goarch }}*
          
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/gorun-linux-amd64
            artifacts/gorun-linux-arm64
            artifacts/gorun-darwin-amd64
            artifacts/gorun-darwin-arm64
            artifacts/gorun-windows-amd64.exe
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}